// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"snowgo/internal/dal/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newOperationLog(db *gorm.DB, opts ...gen.DOOption) operationLog {
	_operationLog := operationLog{}

	_operationLog.operationLogDo.UseDB(db, opts...)
	_operationLog.operationLogDo.UseModel(&model.OperationLog{})

	tableName := _operationLog.operationLogDo.TableName()
	_operationLog.ALL = field.NewAsterisk(tableName)
	_operationLog.ID = field.NewInt64(tableName, "id")
	_operationLog.OperatorID = field.NewInt32(tableName, "operator_id")
	_operationLog.OperatorName = field.NewString(tableName, "operator_name")
	_operationLog.OperatorType = field.NewString(tableName, "operator_type")
	_operationLog.Resource = field.NewString(tableName, "resource")
	_operationLog.ResourceID = field.NewInt32(tableName, "resource_id")
	_operationLog.Action = field.NewString(tableName, "action")
	_operationLog.TraceID = field.NewString(tableName, "trace_id")
	_operationLog.BeforeData = field.NewString(tableName, "before_data")
	_operationLog.AfterData = field.NewString(tableName, "after_data")
	_operationLog.Description = field.NewString(tableName, "description")
	_operationLog.IP = field.NewString(tableName, "ip")
	_operationLog.CreatedAt = field.NewTime(tableName, "created_at")

	_operationLog.fillFieldMap()

	return _operationLog
}

type operationLog struct {
	operationLogDo operationLogDo

	ALL          field.Asterisk
	ID           field.Int64  // 日志主键
	OperatorID   field.Int32  // 操作人 ID
	OperatorName field.String // 操作人用户名
	OperatorType field.String // 操作来源类型，如 User/System/Job/Api
	Resource     field.String // 操作资源类型，如 user/role/menu
	ResourceID   field.Int32  // 资源ID，如 user 表的主键 ID
	Action       field.String // 操作类型：Create/Update/Delete，默认 Create
	TraceID      field.String // 链路id
	BeforeData   field.String // 修改前数据快照（仅 update/delete 时填）
	AfterData    field.String // 修改后数据快照（仅 create/update 时填）
	Description  field.String // 描述
	IP           field.String // 客户端 IP
	CreatedAt    field.Time

	fieldMap map[string]field.Expr
}

func (o operationLog) Table(newTableName string) *operationLog {
	o.operationLogDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o operationLog) As(alias string) *operationLog {
	o.operationLogDo.DO = *(o.operationLogDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *operationLog) updateTableName(table string) *operationLog {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.OperatorID = field.NewInt32(table, "operator_id")
	o.OperatorName = field.NewString(table, "operator_name")
	o.OperatorType = field.NewString(table, "operator_type")
	o.Resource = field.NewString(table, "resource")
	o.ResourceID = field.NewInt32(table, "resource_id")
	o.Action = field.NewString(table, "action")
	o.TraceID = field.NewString(table, "trace_id")
	o.BeforeData = field.NewString(table, "before_data")
	o.AfterData = field.NewString(table, "after_data")
	o.Description = field.NewString(table, "description")
	o.IP = field.NewString(table, "ip")
	o.CreatedAt = field.NewTime(table, "created_at")

	o.fillFieldMap()

	return o
}

func (o *operationLog) WithContext(ctx context.Context) *operationLogDo {
	return o.operationLogDo.WithContext(ctx)
}

func (o operationLog) TableName() string { return o.operationLogDo.TableName() }

func (o operationLog) Alias() string { return o.operationLogDo.Alias() }

func (o operationLog) Columns(cols ...field.Expr) gen.Columns {
	return o.operationLogDo.Columns(cols...)
}

func (o *operationLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *operationLog) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 13)
	o.fieldMap["id"] = o.ID
	o.fieldMap["operator_id"] = o.OperatorID
	o.fieldMap["operator_name"] = o.OperatorName
	o.fieldMap["operator_type"] = o.OperatorType
	o.fieldMap["resource"] = o.Resource
	o.fieldMap["resource_id"] = o.ResourceID
	o.fieldMap["action"] = o.Action
	o.fieldMap["trace_id"] = o.TraceID
	o.fieldMap["before_data"] = o.BeforeData
	o.fieldMap["after_data"] = o.AfterData
	o.fieldMap["description"] = o.Description
	o.fieldMap["ip"] = o.IP
	o.fieldMap["created_at"] = o.CreatedAt
}

func (o operationLog) clone(db *gorm.DB) operationLog {
	o.operationLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o operationLog) replaceDB(db *gorm.DB) operationLog {
	o.operationLogDo.ReplaceDB(db)
	return o
}

type operationLogDo struct{ gen.DO }

func (o operationLogDo) Debug() *operationLogDo {
	return o.withDO(o.DO.Debug())
}

func (o operationLogDo) WithContext(ctx context.Context) *operationLogDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o operationLogDo) ReadDB() *operationLogDo {
	return o.Clauses(dbresolver.Read)
}

func (o operationLogDo) WriteDB() *operationLogDo {
	return o.Clauses(dbresolver.Write)
}

func (o operationLogDo) Session(config *gorm.Session) *operationLogDo {
	return o.withDO(o.DO.Session(config))
}

func (o operationLogDo) Clauses(conds ...clause.Expression) *operationLogDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o operationLogDo) Returning(value interface{}, columns ...string) *operationLogDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o operationLogDo) Not(conds ...gen.Condition) *operationLogDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o operationLogDo) Or(conds ...gen.Condition) *operationLogDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o operationLogDo) Select(conds ...field.Expr) *operationLogDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o operationLogDo) Where(conds ...gen.Condition) *operationLogDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o operationLogDo) Order(conds ...field.Expr) *operationLogDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o operationLogDo) Distinct(cols ...field.Expr) *operationLogDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o operationLogDo) Omit(cols ...field.Expr) *operationLogDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o operationLogDo) Join(table schema.Tabler, on ...field.Expr) *operationLogDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o operationLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) *operationLogDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o operationLogDo) RightJoin(table schema.Tabler, on ...field.Expr) *operationLogDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o operationLogDo) Group(cols ...field.Expr) *operationLogDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o operationLogDo) Having(conds ...gen.Condition) *operationLogDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o operationLogDo) Limit(limit int) *operationLogDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o operationLogDo) Offset(offset int) *operationLogDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o operationLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *operationLogDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o operationLogDo) Unscoped() *operationLogDo {
	return o.withDO(o.DO.Unscoped())
}

func (o operationLogDo) Create(values ...*model.OperationLog) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o operationLogDo) CreateInBatches(values []*model.OperationLog, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o operationLogDo) Save(values ...*model.OperationLog) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o operationLogDo) First() (*model.OperationLog, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OperationLog), nil
	}
}

func (o operationLogDo) Take() (*model.OperationLog, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OperationLog), nil
	}
}

func (o operationLogDo) Last() (*model.OperationLog, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OperationLog), nil
	}
}

func (o operationLogDo) Find() ([]*model.OperationLog, error) {
	result, err := o.DO.Find()
	return result.([]*model.OperationLog), err
}

func (o operationLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OperationLog, err error) {
	buf := make([]*model.OperationLog, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o operationLogDo) FindInBatches(result *[]*model.OperationLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o operationLogDo) Attrs(attrs ...field.AssignExpr) *operationLogDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o operationLogDo) Assign(attrs ...field.AssignExpr) *operationLogDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o operationLogDo) Joins(fields ...field.RelationField) *operationLogDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o operationLogDo) Preload(fields ...field.RelationField) *operationLogDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o operationLogDo) FirstOrInit() (*model.OperationLog, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OperationLog), nil
	}
}

func (o operationLogDo) FirstOrCreate() (*model.OperationLog, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OperationLog), nil
	}
}

func (o operationLogDo) FindByPage(offset int, limit int) (result []*model.OperationLog, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o operationLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o operationLogDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o operationLogDo) Delete(models ...*model.OperationLog) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *operationLogDo) withDO(do gen.Dao) *operationLogDo {
	o.DO = *do.(*gen.DO)
	return o
}
