[mysqld]
# 基础设置
datadir = /var/lib/mysql
pid-file = /var/run/mysqld/mysqld.pid
socket = /var/run/mysqld/mysqld.sock
character-set-server = utf8mb4
collation-server = utf8mb4_unicode_ci
server_id = 1
default-time_zone = '+8:00'

# sync-binlog = 1  # 事务提交多少次刷盘

# 慢查询日志
slow_query_log = 1  # 打开慢查询日志功能
long_query_time = 4  # 超过2秒的查询记录下来

# 连接设置
max_connections = 1500  # 一般设置为500-2000，最大连接数
max_connect_errors = 1000 # 如果客户端尝试连接的错误数量超过这个参数设置的值，则服务器不再接受新的客户端连接。可以通过清空主机的缓存来解除服务器的这种阻止新连接的状态，通过FLUSH HOSTS或mysqladmin flush-hosts命令来清空缓存。这个参数的默认值是100
back_log = 800 # MySQL服务器连接请求队列所能处理的最大连接请求数，如果队列放满了，后续的连接才会拒绝。当主要的MySQL线程在很短时间内获取大量连接请求时，这个参数会生效。接下来，MySQL主线程会花费很短的时间去检查连接，然后开启新的线程。这个参数指定了MySQL的TCP/IP监听队列的大小。如果MySQL服务器在短时间内有大量的连接，可以增加这个参数。
open_files_limit = 65535 # 操作系统允许MySQL服务打开的文件数量。max_connections * 5
interactive_timeout = 3600 # 关闭交互的等待时间(!!!这个是ui界面以及命令交互)，默认8h
wait_timeout = 28800 # 关闭交互的等待时间(!!!这个是指程序连接，程序的等待使用这个)，默认8h

### 内存分配
max_allowed_packet = 20M # 网络传输时单个数据包的大小。默认值是4MB。
join_buffer_size = 1M # 默认值是256KB
thread_cache_size = 32 # MySQL服务缓存以重用的线程数。当客户端断开连接的时候，如果线程缓存没有使用满，则客户端的线程被放入缓存中。如果有客户端断开连接后再次连接到MySQL服务且线程在缓存中，则MySQL服务会优先使用缓存中的线程；如果线程缓存没有这些线程，则MySQL服务器会创建新的线程。如果数据库有很多的新连接，可以增加这个参数来提升性能。如果MySQL服务器每秒有上百个连接，可以增大thread_cache_size参数来使MySQL服务器使用缓存的线程。通过检查Connections和Threads_created状态参数，可以判断线程缓存是否足够。这个参数默认的值是由下面的公式来决定的：8 + (max_connections / 100)
query_cache_size = 64M  # 为查询结果所分配的缓存
table_open_cache = 1024 # 所有线程能打开的表的数量
tmp_table_size = 128M  # 在内存的临时表最大大小
read_buffer_size = 1M  # 顺序读, 读入缓冲区大小设置，全表扫描次数多的话, 可以调大此值


# InnoDB 优化
innodb_buffer_pool_size=512M  # InnDB存储引擎缓存表和索引数据所使用的内存大小。默认值是128MB。在以InnDB存储引擎为主的系统中，可以将这个参数设为机器物理内存50%-70%
innodb_log_file_size = 256M  # 事务日志大小
innodb_log_buffer_size = 4M  # 日志缓冲区大小
innodb_flush_log_at_trx_commit = 1  # 主库保持系统默认, 事务立即写入磁盘, 不会丢失任何一个事务

#其他设置
innodb_file_per_table = 1  # 为每个InnoDB表分配单独的表空间
innodb_write_io_threads = 8  # InnoDB 使用后台线程处理数据页上写 I/O（输入）请求的数量
innodb_read_io_threads = 8  # InnoDB 使用后台线程处理数据页上读 I/O（输出）请求的数量
innodb_purge_threads = 1  # 启用单独的线程来回收无用的数据

# 主从
# binlog_format = row
# gtid_mode = on
# log_bin = on  # 开启binlog日志功能
# log-slave-updates = on  # 开启从库更新binlog日志
